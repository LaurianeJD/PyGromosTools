{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# PyGromos Programm Wrappers Examples\n",
    "\n",
    "## GromosPP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "import os, sys\n",
    "root_dir = os.getcwd()\n",
    "\n",
    "#if package is not installed and path not set correct - this helps you out :)\n",
    "sys.path.append(root_dir+\"/..\")"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "#Import GromosPP\n",
    "## Assumes that you have compiled the Package in a location.\n",
    "\n",
    "from pygromos.gromos import gromosPP\n",
    "in_gromosPP_bin = None  # if none it uses the shell env gromos.\n",
    "gromPP = gromosPP.GromosPP(in_gromosPP_bin)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#EMIN - IMD\n",
    "emin_imd_template_path = files[\"imd_emin\"]\n",
    "bash.copy_file(files[\"imd_emin_basic\"], emin_imd_template_path)\n",
    "\n",
    "emin_imd_template_path = files[\"imd_emin\"]\n",
    "emin_imd = imd.Imd(emin_imd_template_path)\n",
    "emin_imd.SYSTEM.NSM = int(residues[\"SOLV\"]/3)\n",
    "emin_imd.FORCE.adapt_energy_groups(residues)\n",
    "emin_imd.edit_EDS(NUMSTATES=len(residues)-1, S = 1.0, EIR=[0.0 for x in range(lig_num)])\n",
    "\n",
    "lig_atoms = sum([sum(list(residues[res].values())) for res in residues if res != \"SOLV\"])\n",
    "multB = pygromos.files._basics.imd_blocks.MULTIBATH(ALGORITHM=0, NBATHS=2, TEMP0=[\"298\", \"298\"], TAU=[\"0.1\", \"0.1\"], DOFSET=2, LAST=[lig_atoms, residues[\"SOLV\"] + lig_atoms], COMBATH=[1, 2], IRBATH=[1, 2])\n",
    "cont = {key:value for key,value in multB.__dict__.items() if not(key == \"used\" or key == \"name\" or key == \"field_seperator\" or key== \"line_seperator\")}\n",
    "emin_imd.add_block(blocktitle=\"MULTIBATH\", content=cont)\n",
    "\n",
    "emin_imd.POSITIONRES.NTPOR = 0\n",
    "emin_imd.write(emin_imd_template_path)\n",
    "\n",
    "#EM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'rdkit'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-10-9c07f4f90466>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mpygromos\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mfiles\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\OneDrive - ETH Zürich\\PhD\\Code\\pygromos\\pygromos\\files\\__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[1;31m#from pygromos.files.topology.ifp import *\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 15\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mpygromos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfiles\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgromos_system\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[1;33m*\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\OneDrive - ETH Zürich\\PhD\\Code\\pygromos\\pygromos\\files\\gromos_system\\__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mpygromos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfiles\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgromos_system\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgromos_system\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[1;33m*\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\OneDrive - ETH Zürich\\PhD\\Code\\pygromos\\pygromos\\files\\gromos_system\\gromos_system.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     10\u001b[0m \u001b[1;31m#imports\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 12\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mrdkit\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mChem\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     13\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mpygromos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfiles\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[1;33m*\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'rdkit'"
     ]
    }
   ],
   "source": [
    "## GromosXX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "#Import GromosXX\n",
    "## Assumes that you have compiled the Package in a location.\n",
    "import os\n",
    "from pygromos import gromosXX\n",
    "in_gromosXX_bin = None  # if none it uses the shell env gromos.\n",
    "gromXX = gromosXX.GromosXX(in_gromosXX_bin)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "root_dir=\"examples/example_simulation\"\n",
    "os.mkdir(root_dir)\n",
    "os.chdir(root_dir)\n",
    "\n",
    "#InputVars:\n",
    "top_path=\"../example_files/\"\n",
    "cnf_path=\"\"\n",
    "imd_path=\"\"\n",
    "\n",
    "##For posres\n",
    "refpos_path = \"\"\n",
    "posres_path = \"\"\n",
    "\n",
    "#OutputVars\n",
    "out_prefix=\"test_out\"\n",
    "\n",
    "#Do Simulation\n",
    "gromXX.md_run(in_topo_path=top_path, in_coord_path=cnf_path, in_imd_path=imd_path,\n",
    "              in_refpos_path=refpos_path, in_posresspec_path=posres_path,\n",
    "              out_prefix=out_prefix, out_tre=False, out_trc=True)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "pycharm-e152403b",
   "language": "python",
   "display_name": "PyCharm (pygromos)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}